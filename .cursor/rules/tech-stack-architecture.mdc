# Tech Stack & Architecture

> **📖 Reading Order**: Read this file FOURTH, after ui-ux-guidelines.mdc
> **🎯 Purpose**: Technical specifications, architecture details, and performance optimization

## 🛠️ Technology Stack

### Frontend
| Area             | Technology                    | Purpose                                    |
| ---------------- | ----------------------------- | ------------------------------------------ |
| **Framework**    | Next.js 15                   | React framework with App Router            |
| **Language**     | TypeScript                   | Type-safe JavaScript development           |
| **Styling**      | Tailwind CSS                 | Utility-first CSS framework                |
| **UI Components**| shadcn/ui                    | Pre-built, accessible UI components       |
| **Icons**        | Lucide React                 | Consistent icon library                    |
| **Animations**   | Framer Motion                | Smooth animations and micro-interactions   |
| **Rich Text**    | Tiptap Editor                | Rich text editing capabilities             |

### Backend & Data
| Area             | Technology                    | Purpose                                    |
| ---------------- | ----------------------------- | ------------------------------------------ |
| **API**          | Next.js API Routes           | Server-side API endpoints                  |
| **Database**     | SQLite                       | Lightweight, file-based database          |
| **ORM**          | Drizzle ORM                  | Type-safe database operations              |
| **Authentication**| Custom database-based        | User authentication and authorization      |

### State Management & Data Fetching
| Area             | Technology                    | Purpose                                    |
| ---------------- | ----------------------------- | ------------------------------------------ |
| **State**        | Tanstack Query               | Server state management                    |
| **Context**      | React Context Provider        | Client-side state management               |
| **Caching**      | Tanstack Query               | Intelligent data caching and synchronization|
| **Data Fetching**| Tanstack Query               | Optimized API calls with caching and synchronization|

### Development & Build Tools
| Area             | Technology                    | Purpose                                    |
| ---------------- | ----------------------------- | ------------------------------------------ |
| **Package Manager**| Yarn Workspaces             | Monorepo dependency management             |
| **Bundler**      | Next.js (Webpack)            | Application bundling and optimization      |
| **Linting**      | ESLint                       | Code quality and consistency               |
| **Formatting**   | Prettier                     | Code formatting and style consistency      |
| **Testing**      | Jest + Testing Library       | Unit and integration testing               |

## 🏗️ Architecture Overview

### Monorepo Structure
```
vibe-jobportal/
├── packages/
│   ├── web/                    # Next.js frontend application
│   ├── database/               # Database schema and migrations
│   ├── shared/                 # Common utilities and types
│   └── storage/                # File storage management
```

### Package Responsibilities

#### `packages/web/` - Frontend Application
- **Next.js 15** application with App Router
- **React components** organized by functionality
- **API routes** for server-side functionality
- **TypeScript** types and interfaces
- **Tailwind CSS** styling and theming

#### `packages/database/` - Data Layer
- **Drizzle ORM** schema definitions
- **Database migrations** and versioning
- **Seed data** for development and testing
- **Type-safe** database operations

#### `packages/shared/` - Common Utilities
- **TypeScript interfaces** shared across packages
- **Utility functions** for common operations
- **Constants** and configuration values
- **Validation schemas** and helpers

#### `packages/storage/` - File Management
- **File upload** handling and processing
- **Storage organization** (uploads, temp, etc.)
- **File validation** and security
- **CDN integration** capabilities

## 🔐 Authentication & Security

### Authentication Strategy
- **Custom implementation** using database
- **Session-based** authentication
- **Role-based** access control (Job Seeker, Company, Admin)
- **Secure password** hashing and storage

### Security Features
- **CSRF protection** for forms
- **Input validation** and sanitization
- **SQL injection** prevention via Drizzle ORM
- **XSS protection** through proper escaping
- **Rate limiting** for API endpoints

## 📊 Data Flow Architecture

### Frontend to Backend
```
User Action → React Component → API Function → API Route → Database
```

### Data Fetching Pattern
```typescript
// Client-side API layer
const api = {
  jobs: {
    list: () => fetch('/api/jobs').then(res => res.json()),
    create: (data) => fetch('/api/jobs', { method: 'POST', body: JSON.stringify(data) })
  }
}

// Component usage with Tanstack Query
const { data: jobs, isLoading, error } = useQuery({
  queryKey: ['jobs'],
  queryFn: api.jobs.list
})
```

### State Management Strategy
- **Server State**: Managed by Tanstack Query with intelligent caching
- **Client State**: Managed by React Context for UI state
- **Form State**: Managed by React Hook Form or similar
- **Cache Strategy**: Optimistic updates with rollback and background refetching
- **Data Synchronization**: Automatic background updates and real-time sync

## 🚀 Performance & Optimization

### Rendering Strategy
- **Server Components** by default for better performance
- **Client Components** only when interactivity is needed
- **Static Generation** where possible
- **Incremental Static Regeneration** for dynamic content

### Bundle Optimization
- **Code splitting** by route and component
- **Tree shaking** for unused code elimination
- **Image optimization** with Next.js Image component
- **Font optimization** with proper loading strategies

### Database Optimization
- **Indexed queries** for fast data retrieval
- **Connection pooling** for efficient database connections
- **Query optimization** with Drizzle ORM
- **Caching strategy** for frequently accessed data

## 🔧 Development Workflow

### Local Development
```bash
# Start development server
yarn dev

# Database operations
yarn db:generate    # Generate migrations
yarn db:migrate     # Apply migrations
yarn db:seed        # Seed with sample data

# Build and test
yarn build          # Production build
yarn test           # Run tests
yarn lint           # Code linting
```

### Environment Configuration
- **Environment variables** for configuration
- **Development** vs **production** settings
- **Database** connection management
- **API keys** and external service configuration

### Testing Strategy
- **Unit tests** for utility functions and components
- **Integration tests** for API endpoints
- **E2E tests** for critical user flows
- **Component testing** with Testing Library

## 📱 Responsive & Accessibility

### Responsive Design
- **Mobile-first** approach
- **Breakpoint system** with Tailwind CSS
- **Touch-friendly** interactions
- **Adaptive layouts** for different screen sizes

### Accessibility Features
- **Semantic HTML** structure
- **ARIA labels** and roles
- **Keyboard navigation** support
- **Screen reader** compatibility
- **Color contrast** compliance
